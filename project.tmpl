			+--------------------+
			|    EDA092/DIT400   |
			| LAB ASSIGNMENT 2:  |
			| 	THREADS      |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP B11 ----

>> Fill in the group number, names and email addresses of your group members.

Emelie Ekenstedt <emeeke@chalmers.se>
Eros Fabrici <eros@student.chalmers.se>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

We choose to not send any error message when thread_sleep() is called with a negative message, 
we just accept integers > 0, all other numbers are ignored. 

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

To the thread struct we added an integer variable to keep track on how long the thread should sleep.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    int ticks_to_sleep;                 /* How many ticks the thread should be blocked */ //CHANGED 

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When timer_sleep(int ticks) is called and ticks>0 the threads ticks_to_sleep variable is set to ticks and 
the thread's status is set to blocked (thread_block() is called). Otherwise nothing happens.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

In the timer interupt handler we call thread_foreach and pass on the thread_decrease_sleep function which 
first checks if the thread is actually asleep (blocked and with ticks_to_sleep > 0). This ensures that we spend 
just a small amount of time on threads that are not asleep.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

In order to call timer_sleep() you must have turned interupts off. This means that the thread won't be 
interupted during this function call and will have its variable ticks_to_sleep set and its status set to 
blocked before the next thread can do the same thing.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interupts are turned off until timer_sleep has finished executing.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Since the critical section in this case is just a few lines of code, interupts won't be 
turned off for too long and thereby not causing the system to act strangely or fail. We're also letting 
the threads be handled by an external interupthandler so we have to turn interupts off since other 
synchronisation primitives in this situation wouldn't achieve the same results.


			    BATCH SCHEDULING
			    ================
---- DATA STRUCTURES ----

struct condition waitingToGo[2][2]; //Condition matrix for all task types
struct lock block; //used to locking the Critical Section
int currentDirection; //either 0 or 1
int slotsFree; // 0 <= slotsFree <= BUS_CAPACITY

---- SYNCHRONIZATION ----
>> C1: How does your solution guarantee that no more that 3 tasks
>> are using the bus in the same direction?

In getSlot() we force the thread to wait (and release the lock as well) if slotsFree==0 

>> C2: What prevents tasks from opposite directions from using the
>> bus simultaneously?

We use a shared variable which represents the current direction of the tasks that are on the bus. 
Whenever a bus tries to get a slot, will check if the current direction is different from its own.
If true, the thread will wait and release the lock. If the bus is empty on the other hand, the task will 
enter no matter what direction it has.

>> C3: How does your solution grant priority to high priority tasks over
>> the waiting tasks in the same direction?

When a task tries to get a slot the while condition check if task.direction == NORMAL
and if there are priority task of the same direction in the wating list, if so the current thread will wait.
When a task leaves the slot, will check first if there are high priority tasks, with current direction, waiting
and if it's true one of them will be signaled. 

(If no such task are waiting but tasks with high priority who want
to go in the other direction are waiting then these are woken up as soon as the bus is empty. The normal priority tasks 
have to wait for all priority tasks.)

>> C4: How do you guarantee that despite having priority, high priority
>> tasks do not start using the bus while there are still still using
>> it in the oposite direction?

When a high priority task tries to get a slot, it will after having acquired the lock, 
check the shared var currentDirection to see if it's equal to its own direction. it's not, the thread 
will wait and release the lock.
When a task is leaving the slot, after acquiring the lock, it will check first if there are priority tasks 
waiting in the currentDirection, and signal one of them if true, then will check if there are priority 
tasks wating in the opposite direction, but they will get broadcasted only if all slots are free.

---- RATIONALE ----

> C6: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?

We choose this design because it's very similar to the Old Bridge problem, but with some more logic as we had to deal with
priority. An alternative I was thinking about was to use only two cond vars, one for each direction and sort the list in order
to have priority task first, this would have required creating a comparator function, and probably it would have been very time
consuming due to Î˜(nlogn) time each sort invoke. So we think our solution is superior due to simplicity and also computing time
than the sorting one.


			   SURVEY QUESTIONS (optional)
			   ===========================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Was very challenging and interesting due to the logic work behind synch problem. It wasn't too hard
since the document describing the assignment was very helpful and gave a lot of hints of how to solve the problems.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, definitely. I understood a lot about OS and multi-threaded programming as well and the importance 
of mutual exclusion in critical sections.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The check program is a bit missleading since it gives out FAILs if you print out anything at all, like when the threads
enter and exit (which they should according to the specifications).

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters?

>> Any other comments?
